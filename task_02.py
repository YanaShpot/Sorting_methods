#A = ([[1,2,3,4,5],[5,4,3,2,1],[1,3,5,2,4],[1,5,2,4,3],[1,2,3,4,5]])
#A = ([[1,2,3],[3,0,1],[0,0,0]])
#A = ([1,2,0,4,5],(5,0,3,2,1))
#B = ([1,2,3],[3,2,1])
#A = ([0,0,0,0,0],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1],[5,4,0,2,1])
"""A=[[3, 2, 10, 6, 9, 1, 5, 7, 4, 8],
  [2, 10, 8, 9, 5, 4, 3, 7, 6, 1],
  [2, 4, 9, 6, 10, 7, 5, 1, 3, 8],
  [3, 9, 10, 6, 7, 4, 1, 2, 5, 8],
  [7, 3, 8, 6, 5, 4, 10, 1, 2, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
#A = ([0,2,3,0,5,6],[0,2,3,0,5,6])"""

def count_inversions(data,x):
    inversions = [[0,0]]
    for i in range(len(data)):
        if i!=x:
            inv=[0]
            B=[]
            k=0
            for j in range(1,len(data[1])+1):
                if (j in data[x]):
                    if data[i][data[x].index(j)] != 0 :
                        B.append(data[i][data[x].index(j)])

            if(len(B) == 0):
                continue
            mergeSort(B,0,len(B)-1,inv)
            while(inv[0]>=inversions[k][1] and k<len(inversions) - 1):
                k+=1
            inversions.insert(k,[i,inv[0]])
    inversions.pop(len(inversions)-1)
    return inversions
def mergeSort(arr,p,r,inv):
    if p<r:
        q=(p+r)//2
        mergeSort(arr,p,q,inv)
        mergeSort(arr,q+1,r,inv)
        inv[0]+=merge(arr,p,q,r)
def merge(A,p,q,r):
    inv=0
    n1=q-p+1
    n2=r-q
    L=[]
    R=[]
    for i in range(n1):
      L.append(A[p+i])
    for j in range(n2):
        R.append(A[q+j+1])
    L.append(10000000000)
    R.append(10000000000)
    i=j=0
    for k in range(p,r+1):
        if L[i]<=R[j]:
            A[k]=L[i]
            i+=1
        else:
            inv+=(len(L[i:])-1)
            A[k]=R[j]
            j=j+1
    return inv



